// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v3.19.6
// source: proto/p2p.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enums
type HealthStatus int32

const (
	HealthStatus_HEALTH_UNKNOWN   HealthStatus = 0
	HealthStatus_HEALTH_HEALTHY   HealthStatus = 1
	HealthStatus_HEALTH_DEGRADED  HealthStatus = 2
	HealthStatus_HEALTH_UNHEALTHY HealthStatus = 3
)

// Enum value maps for HealthStatus.
var (
	HealthStatus_name = map[int32]string{
		0: "HEALTH_UNKNOWN",
		1: "HEALTH_HEALTHY",
		2: "HEALTH_DEGRADED",
		3: "HEALTH_UNHEALTHY",
	}
	HealthStatus_value = map[string]int32{
		"HEALTH_UNKNOWN":   0,
		"HEALTH_HEALTHY":   1,
		"HEALTH_DEGRADED":  2,
		"HEALTH_UNHEALTHY": 3,
	}
)

func (x HealthStatus) Enum() *HealthStatus {
	p := new(HealthStatus)
	*p = x
	return p
}

func (x HealthStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HealthStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_p2p_proto_enumTypes[0].Descriptor()
}

func (HealthStatus) Type() protoreflect.EnumType {
	return &file_proto_p2p_proto_enumTypes[0]
}

func (x HealthStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HealthStatus.Descriptor instead.
func (HealthStatus) EnumDescriptor() ([]byte, []int) {
	return file_proto_p2p_proto_rawDescGZIP(), []int{0}
}

type ReplicationStrategy int32

const (
	ReplicationStrategy_REPLICATION_EAGER  ReplicationStrategy = 0
	ReplicationStrategy_REPLICATION_LAZY   ReplicationStrategy = 1
	ReplicationStrategy_REPLICATION_HYBRID ReplicationStrategy = 2
)

// Enum value maps for ReplicationStrategy.
var (
	ReplicationStrategy_name = map[int32]string{
		0: "REPLICATION_EAGER",
		1: "REPLICATION_LAZY",
		2: "REPLICATION_HYBRID",
	}
	ReplicationStrategy_value = map[string]int32{
		"REPLICATION_EAGER":  0,
		"REPLICATION_LAZY":   1,
		"REPLICATION_HYBRID": 2,
	}
)

func (x ReplicationStrategy) Enum() *ReplicationStrategy {
	p := new(ReplicationStrategy)
	*p = x
	return p
}

func (x ReplicationStrategy) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ReplicationStrategy) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_p2p_proto_enumTypes[1].Descriptor()
}

func (ReplicationStrategy) Type() protoreflect.EnumType {
	return &file_proto_p2p_proto_enumTypes[1]
}

func (x ReplicationStrategy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ReplicationStrategy.Descriptor instead.
func (ReplicationStrategy) EnumDescriptor() ([]byte, []int) {
	return file_proto_p2p_proto_rawDescGZIP(), []int{1}
}

// Ping request and response for health checking
type PingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Timestamp     int64                  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // Unix timestamp in seconds
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	mi := &file_proto_p2p_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_p2p_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_proto_p2p_proto_rawDescGZIP(), []int{0}
}

func (x *PingRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *PingRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type PingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Timestamp     int64                  `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // Unix timestamp in seconds
	Status        *NodeStatus            `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	mi := &file_proto_p2p_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_p2p_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_proto_p2p_proto_rawDescGZIP(), []int{1}
}

func (x *PingResponse) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *PingResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *PingResponse) GetStatus() *NodeStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// Blob-related messages
type GetBlobRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Digest        string                 `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
	Offset        int64                  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit         int64                  `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBlobRequest) Reset() {
	*x = GetBlobRequest{}
	mi := &file_proto_p2p_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBlobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBlobRequest) ProtoMessage() {}

func (x *GetBlobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_p2p_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBlobRequest.ProtoReflect.Descriptor instead.
func (*GetBlobRequest) Descriptor() ([]byte, []int) {
	return file_proto_p2p_proto_rawDescGZIP(), []int{2}
}

func (x *GetBlobRequest) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *GetBlobRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *GetBlobRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type BlobChunk struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Digest        string                 `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
	Offset        int64                  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Data          []byte                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	IsFinal       bool                   `protobuf:"varint,4,opt,name=is_final,json=isFinal,proto3" json:"is_final,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BlobChunk) Reset() {
	*x = BlobChunk{}
	mi := &file_proto_p2p_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlobChunk) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlobChunk) ProtoMessage() {}

func (x *BlobChunk) ProtoReflect() protoreflect.Message {
	mi := &file_proto_p2p_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlobChunk.ProtoReflect.Descriptor instead.
func (*BlobChunk) Descriptor() ([]byte, []int) {
	return file_proto_p2p_proto_rawDescGZIP(), []int{3}
}

func (x *BlobChunk) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *BlobChunk) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *BlobChunk) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *BlobChunk) GetIsFinal() bool {
	if x != nil {
		return x.IsFinal
	}
	return false
}

type PutBlobResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Digest        string                 `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
	Size          int64                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	Success       bool                   `protobuf:"varint,3,opt,name=success,proto3" json:"success,omitempty"`
	Error         string                 `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PutBlobResponse) Reset() {
	*x = PutBlobResponse{}
	mi := &file_proto_p2p_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PutBlobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutBlobResponse) ProtoMessage() {}

func (x *PutBlobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_p2p_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutBlobResponse.ProtoReflect.Descriptor instead.
func (*PutBlobResponse) Descriptor() ([]byte, []int) {
	return file_proto_p2p_proto_rawDescGZIP(), []int{4}
}

func (x *PutBlobResponse) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *PutBlobResponse) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *PutBlobResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PutBlobResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type HasBlobRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Digest        string                 `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HasBlobRequest) Reset() {
	*x = HasBlobRequest{}
	mi := &file_proto_p2p_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HasBlobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasBlobRequest) ProtoMessage() {}

func (x *HasBlobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_p2p_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasBlobRequest.ProtoReflect.Descriptor instead.
func (*HasBlobRequest) Descriptor() ([]byte, []int) {
	return file_proto_p2p_proto_rawDescGZIP(), []int{5}
}

func (x *HasBlobRequest) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

type HasBlobResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Exists        bool                   `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
	Size          int64                  `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HasBlobResponse) Reset() {
	*x = HasBlobResponse{}
	mi := &file_proto_p2p_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HasBlobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasBlobResponse) ProtoMessage() {}

func (x *HasBlobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_p2p_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasBlobResponse.ProtoReflect.Descriptor instead.
func (*HasBlobResponse) Descriptor() ([]byte, []int) {
	return file_proto_p2p_proto_rawDescGZIP(), []int{6}
}

func (x *HasBlobResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

func (x *HasBlobResponse) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

// Manifest-related messages
type GetManifestRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Repository    string                 `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Reference     string                 `protobuf:"bytes,2,opt,name=reference,proto3" json:"reference,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetManifestRequest) Reset() {
	*x = GetManifestRequest{}
	mi := &file_proto_p2p_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetManifestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetManifestRequest) ProtoMessage() {}

func (x *GetManifestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_p2p_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetManifestRequest.ProtoReflect.Descriptor instead.
func (*GetManifestRequest) Descriptor() ([]byte, []int) {
	return file_proto_p2p_proto_rawDescGZIP(), []int{7}
}

func (x *GetManifestRequest) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *GetManifestRequest) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

type GetManifestResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ManifestData  []byte                 `protobuf:"bytes,1,opt,name=manifest_data,json=manifestData,proto3" json:"manifest_data,omitempty"`
	MediaType     string                 `protobuf:"bytes,2,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`
	Digest        string                 `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
	Size          int64                  `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetManifestResponse) Reset() {
	*x = GetManifestResponse{}
	mi := &file_proto_p2p_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetManifestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetManifestResponse) ProtoMessage() {}

func (x *GetManifestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_p2p_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetManifestResponse.ProtoReflect.Descriptor instead.
func (*GetManifestResponse) Descriptor() ([]byte, []int) {
	return file_proto_p2p_proto_rawDescGZIP(), []int{8}
}

func (x *GetManifestResponse) GetManifestData() []byte {
	if x != nil {
		return x.ManifestData
	}
	return nil
}

func (x *GetManifestResponse) GetMediaType() string {
	if x != nil {
		return x.MediaType
	}
	return ""
}

func (x *GetManifestResponse) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *GetManifestResponse) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type PutManifestRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Repository    string                 `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Reference     string                 `protobuf:"bytes,2,opt,name=reference,proto3" json:"reference,omitempty"`
	ManifestData  []byte                 `protobuf:"bytes,3,opt,name=manifest_data,json=manifestData,proto3" json:"manifest_data,omitempty"`
	MediaType     string                 `protobuf:"bytes,4,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PutManifestRequest) Reset() {
	*x = PutManifestRequest{}
	mi := &file_proto_p2p_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PutManifestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutManifestRequest) ProtoMessage() {}

func (x *PutManifestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_p2p_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutManifestRequest.ProtoReflect.Descriptor instead.
func (*PutManifestRequest) Descriptor() ([]byte, []int) {
	return file_proto_p2p_proto_rawDescGZIP(), []int{9}
}

func (x *PutManifestRequest) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *PutManifestRequest) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *PutManifestRequest) GetManifestData() []byte {
	if x != nil {
		return x.ManifestData
	}
	return nil
}

func (x *PutManifestRequest) GetMediaType() string {
	if x != nil {
		return x.MediaType
	}
	return ""
}

type PutManifestResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Digest        string                 `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
	Success       bool                   `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Error         string                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PutManifestResponse) Reset() {
	*x = PutManifestResponse{}
	mi := &file_proto_p2p_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PutManifestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutManifestResponse) ProtoMessage() {}

func (x *PutManifestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_p2p_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutManifestResponse.ProtoReflect.Descriptor instead.
func (*PutManifestResponse) Descriptor() ([]byte, []int) {
	return file_proto_p2p_proto_rawDescGZIP(), []int{10}
}

func (x *PutManifestResponse) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *PutManifestResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PutManifestResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type HasManifestRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Repository    string                 `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Reference     string                 `protobuf:"bytes,2,opt,name=reference,proto3" json:"reference,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HasManifestRequest) Reset() {
	*x = HasManifestRequest{}
	mi := &file_proto_p2p_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HasManifestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasManifestRequest) ProtoMessage() {}

func (x *HasManifestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_p2p_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasManifestRequest.ProtoReflect.Descriptor instead.
func (*HasManifestRequest) Descriptor() ([]byte, []int) {
	return file_proto_p2p_proto_rawDescGZIP(), []int{11}
}

func (x *HasManifestRequest) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *HasManifestRequest) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

type HasManifestResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Exists        bool                   `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
	Digest        string                 `protobuf:"bytes,2,opt,name=digest,proto3" json:"digest,omitempty"`
	Size          int64                  `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HasManifestResponse) Reset() {
	*x = HasManifestResponse{}
	mi := &file_proto_p2p_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HasManifestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HasManifestResponse) ProtoMessage() {}

func (x *HasManifestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_p2p_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HasManifestResponse.ProtoReflect.Descriptor instead.
func (*HasManifestResponse) Descriptor() ([]byte, []int) {
	return file_proto_p2p_proto_rawDescGZIP(), []int{12}
}

func (x *HasManifestResponse) GetExists() bool {
	if x != nil {
		return x.Exists
	}
	return false
}

func (x *HasManifestResponse) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *HasManifestResponse) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

// Peer discovery messages
type GetPeersRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        string                 `protobuf:"bytes,1,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPeersRequest) Reset() {
	*x = GetPeersRequest{}
	mi := &file_proto_p2p_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPeersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPeersRequest) ProtoMessage() {}

func (x *GetPeersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_p2p_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPeersRequest.ProtoReflect.Descriptor instead.
func (*GetPeersRequest) Descriptor() ([]byte, []int) {
	return file_proto_p2p_proto_rawDescGZIP(), []int{13}
}

func (x *GetPeersRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type GetPeersResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Peers         []*PeerInfo            `protobuf:"bytes,1,rep,name=peers,proto3" json:"peers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetPeersResponse) Reset() {
	*x = GetPeersResponse{}
	mi := &file_proto_p2p_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetPeersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPeersResponse) ProtoMessage() {}

func (x *GetPeersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_p2p_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPeersResponse.ProtoReflect.Descriptor instead.
func (*GetPeersResponse) Descriptor() ([]byte, []int) {
	return file_proto_p2p_proto_rawDescGZIP(), []int{14}
}

func (x *GetPeersResponse) GetPeers() []*PeerInfo {
	if x != nil {
		return x.Peers
	}
	return nil
}

type AnnounceNodeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PeerInfo      *PeerInfo              `protobuf:"bytes,1,opt,name=peer_info,json=peerInfo,proto3" json:"peer_info,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnnounceNodeRequest) Reset() {
	*x = AnnounceNodeRequest{}
	mi := &file_proto_p2p_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnnounceNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnounceNodeRequest) ProtoMessage() {}

func (x *AnnounceNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_p2p_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnounceNodeRequest.ProtoReflect.Descriptor instead.
func (*AnnounceNodeRequest) Descriptor() ([]byte, []int) {
	return file_proto_p2p_proto_rawDescGZIP(), []int{15}
}

func (x *AnnounceNodeRequest) GetPeerInfo() *PeerInfo {
	if x != nil {
		return x.PeerInfo
	}
	return nil
}

type AnnounceNodeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error         string                 `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnnounceNodeResponse) Reset() {
	*x = AnnounceNodeResponse{}
	mi := &file_proto_p2p_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnnounceNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnnounceNodeResponse) ProtoMessage() {}

func (x *AnnounceNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_p2p_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnnounceNodeResponse.ProtoReflect.Descriptor instead.
func (*AnnounceNodeResponse) Descriptor() ([]byte, []int) {
	return file_proto_p2p_proto_rawDescGZIP(), []int{16}
}

func (x *AnnounceNodeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *AnnounceNodeResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Replication messages
type ReplicateBlobRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Digest        string                 `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
	TargetPeers   []string               `protobuf:"bytes,2,rep,name=target_peers,json=targetPeers,proto3" json:"target_peers,omitempty"`
	Strategy      ReplicationStrategy    `protobuf:"varint,3,opt,name=strategy,proto3,enum=octoserve.p2p.ReplicationStrategy" json:"strategy,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplicateBlobRequest) Reset() {
	*x = ReplicateBlobRequest{}
	mi := &file_proto_p2p_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicateBlobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicateBlobRequest) ProtoMessage() {}

func (x *ReplicateBlobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_p2p_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicateBlobRequest.ProtoReflect.Descriptor instead.
func (*ReplicateBlobRequest) Descriptor() ([]byte, []int) {
	return file_proto_p2p_proto_rawDescGZIP(), []int{17}
}

func (x *ReplicateBlobRequest) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *ReplicateBlobRequest) GetTargetPeers() []string {
	if x != nil {
		return x.TargetPeers
	}
	return nil
}

func (x *ReplicateBlobRequest) GetStrategy() ReplicationStrategy {
	if x != nil {
		return x.Strategy
	}
	return ReplicationStrategy_REPLICATION_EAGER
}

type ReplicateBlobResponse struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Success         bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	SuccessfulPeers []string               `protobuf:"bytes,2,rep,name=successful_peers,json=successfulPeers,proto3" json:"successful_peers,omitempty"`
	FailedPeers     []string               `protobuf:"bytes,3,rep,name=failed_peers,json=failedPeers,proto3" json:"failed_peers,omitempty"`
	Error           string                 `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *ReplicateBlobResponse) Reset() {
	*x = ReplicateBlobResponse{}
	mi := &file_proto_p2p_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicateBlobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicateBlobResponse) ProtoMessage() {}

func (x *ReplicateBlobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_p2p_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicateBlobResponse.ProtoReflect.Descriptor instead.
func (*ReplicateBlobResponse) Descriptor() ([]byte, []int) {
	return file_proto_p2p_proto_rawDescGZIP(), []int{18}
}

func (x *ReplicateBlobResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ReplicateBlobResponse) GetSuccessfulPeers() []string {
	if x != nil {
		return x.SuccessfulPeers
	}
	return nil
}

func (x *ReplicateBlobResponse) GetFailedPeers() []string {
	if x != nil {
		return x.FailedPeers
	}
	return nil
}

func (x *ReplicateBlobResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type SyncManifestRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Repository    string                 `protobuf:"bytes,1,opt,name=repository,proto3" json:"repository,omitempty"`
	Reference     string                 `protobuf:"bytes,2,opt,name=reference,proto3" json:"reference,omitempty"`
	ManifestData  []byte                 `protobuf:"bytes,3,opt,name=manifest_data,json=manifestData,proto3" json:"manifest_data,omitempty"`
	Digest        string                 `protobuf:"bytes,4,opt,name=digest,proto3" json:"digest,omitempty"`
	Timestamp     int64                  `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // Unix timestamp in seconds
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncManifestRequest) Reset() {
	*x = SyncManifestRequest{}
	mi := &file_proto_p2p_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncManifestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncManifestRequest) ProtoMessage() {}

func (x *SyncManifestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_p2p_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncManifestRequest.ProtoReflect.Descriptor instead.
func (*SyncManifestRequest) Descriptor() ([]byte, []int) {
	return file_proto_p2p_proto_rawDescGZIP(), []int{19}
}

func (x *SyncManifestRequest) GetRepository() string {
	if x != nil {
		return x.Repository
	}
	return ""
}

func (x *SyncManifestRequest) GetReference() string {
	if x != nil {
		return x.Reference
	}
	return ""
}

func (x *SyncManifestRequest) GetManifestData() []byte {
	if x != nil {
		return x.ManifestData
	}
	return nil
}

func (x *SyncManifestRequest) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *SyncManifestRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type SyncManifestResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Success       bool                   `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Conflict      bool                   `protobuf:"varint,2,opt,name=conflict,proto3" json:"conflict,omitempty"`
	Error         string                 `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SyncManifestResponse) Reset() {
	*x = SyncManifestResponse{}
	mi := &file_proto_p2p_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SyncManifestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SyncManifestResponse) ProtoMessage() {}

func (x *SyncManifestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_p2p_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SyncManifestResponse.ProtoReflect.Descriptor instead.
func (*SyncManifestResponse) Descriptor() ([]byte, []int) {
	return file_proto_p2p_proto_rawDescGZIP(), []int{20}
}

func (x *SyncManifestResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *SyncManifestResponse) GetConflict() bool {
	if x != nil {
		return x.Conflict
	}
	return false
}

func (x *SyncManifestResponse) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

// Common data structures
type PeerInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Address       string                 `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Port          int32                  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Metadata      map[string]string      `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	LastSeen      int64                  `protobuf:"varint,5,opt,name=last_seen,json=lastSeen,proto3" json:"last_seen,omitempty"` // Unix timestamp in seconds
	Status        *NodeStatus            `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PeerInfo) Reset() {
	*x = PeerInfo{}
	mi := &file_proto_p2p_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PeerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PeerInfo) ProtoMessage() {}

func (x *PeerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_p2p_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PeerInfo.ProtoReflect.Descriptor instead.
func (*PeerInfo) Descriptor() ([]byte, []int) {
	return file_proto_p2p_proto_rawDescGZIP(), []int{21}
}

func (x *PeerInfo) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PeerInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *PeerInfo) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *PeerInfo) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PeerInfo) GetLastSeen() int64 {
	if x != nil {
		return x.LastSeen
	}
	return 0
}

func (x *PeerInfo) GetStatus() *NodeStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

type NodeStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Health        HealthStatus           `protobuf:"varint,1,opt,name=health,proto3,enum=octoserve.p2p.HealthStatus" json:"health,omitempty"`
	UptimeSeconds int64                  `protobuf:"varint,2,opt,name=uptime_seconds,json=uptimeSeconds,proto3" json:"uptime_seconds,omitempty"`
	Version       string                 `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	Capabilities  map[string]string      `protobuf:"bytes,4,rep,name=capabilities,proto3" json:"capabilities,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Resources     *ResourceInfo          `protobuf:"bytes,5,opt,name=resources,proto3" json:"resources,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodeStatus) Reset() {
	*x = NodeStatus{}
	mi := &file_proto_p2p_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodeStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeStatus) ProtoMessage() {}

func (x *NodeStatus) ProtoReflect() protoreflect.Message {
	mi := &file_proto_p2p_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeStatus.ProtoReflect.Descriptor instead.
func (*NodeStatus) Descriptor() ([]byte, []int) {
	return file_proto_p2p_proto_rawDescGZIP(), []int{22}
}

func (x *NodeStatus) GetHealth() HealthStatus {
	if x != nil {
		return x.Health
	}
	return HealthStatus_HEALTH_UNKNOWN
}

func (x *NodeStatus) GetUptimeSeconds() int64 {
	if x != nil {
		return x.UptimeSeconds
	}
	return 0
}

func (x *NodeStatus) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *NodeStatus) GetCapabilities() map[string]string {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *NodeStatus) GetResources() *ResourceInfo {
	if x != nil {
		return x.Resources
	}
	return nil
}

type ResourceInfo struct {
	state                 protoimpl.MessageState `protogen:"open.v1"`
	StorageBytesUsed      int64                  `protobuf:"varint,1,opt,name=storage_bytes_used,json=storageBytesUsed,proto3" json:"storage_bytes_used,omitempty"`
	StorageBytesAvailable int64                  `protobuf:"varint,2,opt,name=storage_bytes_available,json=storageBytesAvailable,proto3" json:"storage_bytes_available,omitempty"`
	BlobCount             int64                  `protobuf:"varint,3,opt,name=blob_count,json=blobCount,proto3" json:"blob_count,omitempty"`
	ManifestCount         int64                  `protobuf:"varint,4,opt,name=manifest_count,json=manifestCount,proto3" json:"manifest_count,omitempty"`
	CpuUsagePercent       float64                `protobuf:"fixed64,5,opt,name=cpu_usage_percent,json=cpuUsagePercent,proto3" json:"cpu_usage_percent,omitempty"`
	MemoryUsagePercent    float64                `protobuf:"fixed64,6,opt,name=memory_usage_percent,json=memoryUsagePercent,proto3" json:"memory_usage_percent,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *ResourceInfo) Reset() {
	*x = ResourceInfo{}
	mi := &file_proto_p2p_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResourceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceInfo) ProtoMessage() {}

func (x *ResourceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_p2p_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceInfo.ProtoReflect.Descriptor instead.
func (*ResourceInfo) Descriptor() ([]byte, []int) {
	return file_proto_p2p_proto_rawDescGZIP(), []int{23}
}

func (x *ResourceInfo) GetStorageBytesUsed() int64 {
	if x != nil {
		return x.StorageBytesUsed
	}
	return 0
}

func (x *ResourceInfo) GetStorageBytesAvailable() int64 {
	if x != nil {
		return x.StorageBytesAvailable
	}
	return 0
}

func (x *ResourceInfo) GetBlobCount() int64 {
	if x != nil {
		return x.BlobCount
	}
	return 0
}

func (x *ResourceInfo) GetManifestCount() int64 {
	if x != nil {
		return x.ManifestCount
	}
	return 0
}

func (x *ResourceInfo) GetCpuUsagePercent() float64 {
	if x != nil {
		return x.CpuUsagePercent
	}
	return 0
}

func (x *ResourceInfo) GetMemoryUsagePercent() float64 {
	if x != nil {
		return x.MemoryUsagePercent
	}
	return 0
}

var File_proto_p2p_proto protoreflect.FileDescriptor

const file_proto_p2p_proto_rawDesc = "" +
	"\n" +
	"\x0fproto/p2p.proto\x12\roctoserve.p2p\"D\n" +
	"\vPingRequest\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\x03R\ttimestamp\"x\n" +
	"\fPingResponse\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\x12\x1c\n" +
	"\ttimestamp\x18\x02 \x01(\x03R\ttimestamp\x121\n" +
	"\x06status\x18\x03 \x01(\v2\x19.octoserve.p2p.NodeStatusR\x06status\"V\n" +
	"\x0eGetBlobRequest\x12\x16\n" +
	"\x06digest\x18\x01 \x01(\tR\x06digest\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\x03R\x06offset\x12\x14\n" +
	"\x05limit\x18\x03 \x01(\x03R\x05limit\"j\n" +
	"\tBlobChunk\x12\x16\n" +
	"\x06digest\x18\x01 \x01(\tR\x06digest\x12\x16\n" +
	"\x06offset\x18\x02 \x01(\x03R\x06offset\x12\x12\n" +
	"\x04data\x18\x03 \x01(\fR\x04data\x12\x19\n" +
	"\bis_final\x18\x04 \x01(\bR\aisFinal\"m\n" +
	"\x0fPutBlobResponse\x12\x16\n" +
	"\x06digest\x18\x01 \x01(\tR\x06digest\x12\x12\n" +
	"\x04size\x18\x02 \x01(\x03R\x04size\x12\x18\n" +
	"\asuccess\x18\x03 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x04 \x01(\tR\x05error\"(\n" +
	"\x0eHasBlobRequest\x12\x16\n" +
	"\x06digest\x18\x01 \x01(\tR\x06digest\"=\n" +
	"\x0fHasBlobResponse\x12\x16\n" +
	"\x06exists\x18\x01 \x01(\bR\x06exists\x12\x12\n" +
	"\x04size\x18\x02 \x01(\x03R\x04size\"R\n" +
	"\x12GetManifestRequest\x12\x1e\n" +
	"\n" +
	"repository\x18\x01 \x01(\tR\n" +
	"repository\x12\x1c\n" +
	"\treference\x18\x02 \x01(\tR\treference\"\x85\x01\n" +
	"\x13GetManifestResponse\x12#\n" +
	"\rmanifest_data\x18\x01 \x01(\fR\fmanifestData\x12\x1d\n" +
	"\n" +
	"media_type\x18\x02 \x01(\tR\tmediaType\x12\x16\n" +
	"\x06digest\x18\x03 \x01(\tR\x06digest\x12\x12\n" +
	"\x04size\x18\x04 \x01(\x03R\x04size\"\x96\x01\n" +
	"\x12PutManifestRequest\x12\x1e\n" +
	"\n" +
	"repository\x18\x01 \x01(\tR\n" +
	"repository\x12\x1c\n" +
	"\treference\x18\x02 \x01(\tR\treference\x12#\n" +
	"\rmanifest_data\x18\x03 \x01(\fR\fmanifestData\x12\x1d\n" +
	"\n" +
	"media_type\x18\x04 \x01(\tR\tmediaType\"]\n" +
	"\x13PutManifestResponse\x12\x16\n" +
	"\x06digest\x18\x01 \x01(\tR\x06digest\x12\x18\n" +
	"\asuccess\x18\x02 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x03 \x01(\tR\x05error\"R\n" +
	"\x12HasManifestRequest\x12\x1e\n" +
	"\n" +
	"repository\x18\x01 \x01(\tR\n" +
	"repository\x12\x1c\n" +
	"\treference\x18\x02 \x01(\tR\treference\"Y\n" +
	"\x13HasManifestResponse\x12\x16\n" +
	"\x06exists\x18\x01 \x01(\bR\x06exists\x12\x16\n" +
	"\x06digest\x18\x02 \x01(\tR\x06digest\x12\x12\n" +
	"\x04size\x18\x03 \x01(\x03R\x04size\"*\n" +
	"\x0fGetPeersRequest\x12\x17\n" +
	"\anode_id\x18\x01 \x01(\tR\x06nodeId\"A\n" +
	"\x10GetPeersResponse\x12-\n" +
	"\x05peers\x18\x01 \x03(\v2\x17.octoserve.p2p.PeerInfoR\x05peers\"K\n" +
	"\x13AnnounceNodeRequest\x124\n" +
	"\tpeer_info\x18\x01 \x01(\v2\x17.octoserve.p2p.PeerInfoR\bpeerInfo\"F\n" +
	"\x14AnnounceNodeResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x14\n" +
	"\x05error\x18\x02 \x01(\tR\x05error\"\x91\x01\n" +
	"\x14ReplicateBlobRequest\x12\x16\n" +
	"\x06digest\x18\x01 \x01(\tR\x06digest\x12!\n" +
	"\ftarget_peers\x18\x02 \x03(\tR\vtargetPeers\x12>\n" +
	"\bstrategy\x18\x03 \x01(\x0e2\".octoserve.p2p.ReplicationStrategyR\bstrategy\"\x95\x01\n" +
	"\x15ReplicateBlobResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12)\n" +
	"\x10successful_peers\x18\x02 \x03(\tR\x0fsuccessfulPeers\x12!\n" +
	"\ffailed_peers\x18\x03 \x03(\tR\vfailedPeers\x12\x14\n" +
	"\x05error\x18\x04 \x01(\tR\x05error\"\xae\x01\n" +
	"\x13SyncManifestRequest\x12\x1e\n" +
	"\n" +
	"repository\x18\x01 \x01(\tR\n" +
	"repository\x12\x1c\n" +
	"\treference\x18\x02 \x01(\tR\treference\x12#\n" +
	"\rmanifest_data\x18\x03 \x01(\fR\fmanifestData\x12\x16\n" +
	"\x06digest\x18\x04 \x01(\tR\x06digest\x12\x1c\n" +
	"\ttimestamp\x18\x05 \x01(\x03R\ttimestamp\"b\n" +
	"\x14SyncManifestResponse\x12\x18\n" +
	"\asuccess\x18\x01 \x01(\bR\asuccess\x12\x1a\n" +
	"\bconflict\x18\x02 \x01(\bR\bconflict\x12\x14\n" +
	"\x05error\x18\x03 \x01(\tR\x05error\"\x98\x02\n" +
	"\bPeerInfo\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\tR\x02id\x12\x18\n" +
	"\aaddress\x18\x02 \x01(\tR\aaddress\x12\x12\n" +
	"\x04port\x18\x03 \x01(\x05R\x04port\x12A\n" +
	"\bmetadata\x18\x04 \x03(\v2%.octoserve.p2p.PeerInfo.MetadataEntryR\bmetadata\x12\x1b\n" +
	"\tlast_seen\x18\x05 \x01(\x03R\blastSeen\x121\n" +
	"\x06status\x18\x06 \x01(\v2\x19.octoserve.p2p.NodeStatusR\x06status\x1a;\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xcf\x02\n" +
	"\n" +
	"NodeStatus\x123\n" +
	"\x06health\x18\x01 \x01(\x0e2\x1b.octoserve.p2p.HealthStatusR\x06health\x12%\n" +
	"\x0euptime_seconds\x18\x02 \x01(\x03R\ruptimeSeconds\x12\x18\n" +
	"\aversion\x18\x03 \x01(\tR\aversion\x12O\n" +
	"\fcapabilities\x18\x04 \x03(\v2+.octoserve.p2p.NodeStatus.CapabilitiesEntryR\fcapabilities\x129\n" +
	"\tresources\x18\x05 \x01(\v2\x1b.octoserve.p2p.ResourceInfoR\tresources\x1a?\n" +
	"\x11CapabilitiesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\x98\x02\n" +
	"\fResourceInfo\x12,\n" +
	"\x12storage_bytes_used\x18\x01 \x01(\x03R\x10storageBytesUsed\x126\n" +
	"\x17storage_bytes_available\x18\x02 \x01(\x03R\x15storageBytesAvailable\x12\x1d\n" +
	"\n" +
	"blob_count\x18\x03 \x01(\x03R\tblobCount\x12%\n" +
	"\x0emanifest_count\x18\x04 \x01(\x03R\rmanifestCount\x12*\n" +
	"\x11cpu_usage_percent\x18\x05 \x01(\x01R\x0fcpuUsagePercent\x120\n" +
	"\x14memory_usage_percent\x18\x06 \x01(\x01R\x12memoryUsagePercent*a\n" +
	"\fHealthStatus\x12\x12\n" +
	"\x0eHEALTH_UNKNOWN\x10\x00\x12\x12\n" +
	"\x0eHEALTH_HEALTHY\x10\x01\x12\x13\n" +
	"\x0fHEALTH_DEGRADED\x10\x02\x12\x14\n" +
	"\x10HEALTH_UNHEALTHY\x10\x03*Z\n" +
	"\x13ReplicationStrategy\x12\x15\n" +
	"\x11REPLICATION_EAGER\x10\x00\x12\x14\n" +
	"\x10REPLICATION_LAZY\x10\x01\x12\x16\n" +
	"\x12REPLICATION_HYBRID\x10\x022\x81\a\n" +
	"\n" +
	"P2PService\x12?\n" +
	"\x04Ping\x12\x1a.octoserve.p2p.PingRequest\x1a\x1b.octoserve.p2p.PingResponse\x12D\n" +
	"\aGetBlob\x12\x1d.octoserve.p2p.GetBlobRequest\x1a\x18.octoserve.p2p.BlobChunk0\x01\x12E\n" +
	"\aPutBlob\x12\x18.octoserve.p2p.BlobChunk\x1a\x1e.octoserve.p2p.PutBlobResponse(\x01\x12H\n" +
	"\aHasBlob\x12\x1d.octoserve.p2p.HasBlobRequest\x1a\x1e.octoserve.p2p.HasBlobResponse\x12T\n" +
	"\vGetManifest\x12!.octoserve.p2p.GetManifestRequest\x1a\".octoserve.p2p.GetManifestResponse\x12T\n" +
	"\vPutManifest\x12!.octoserve.p2p.PutManifestRequest\x1a\".octoserve.p2p.PutManifestResponse\x12T\n" +
	"\vHasManifest\x12!.octoserve.p2p.HasManifestRequest\x1a\".octoserve.p2p.HasManifestResponse\x12K\n" +
	"\bGetPeers\x12\x1e.octoserve.p2p.GetPeersRequest\x1a\x1f.octoserve.p2p.GetPeersResponse\x12W\n" +
	"\fAnnounceNode\x12\".octoserve.p2p.AnnounceNodeRequest\x1a#.octoserve.p2p.AnnounceNodeResponse\x12Z\n" +
	"\rReplicateBlob\x12#.octoserve.p2p.ReplicateBlobRequest\x1a$.octoserve.p2p.ReplicateBlobResponse\x12W\n" +
	"\fSyncManifest\x12\".octoserve.p2p.SyncManifestRequest\x1a#.octoserve.p2p.SyncManifestResponseB1Z/github.com/jbpratt/octoserve/internal/p2p/protob\x06proto3"

var (
	file_proto_p2p_proto_rawDescOnce sync.Once
	file_proto_p2p_proto_rawDescData []byte
)

func file_proto_p2p_proto_rawDescGZIP() []byte {
	file_proto_p2p_proto_rawDescOnce.Do(func() {
		file_proto_p2p_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_p2p_proto_rawDesc), len(file_proto_p2p_proto_rawDesc)))
	})
	return file_proto_p2p_proto_rawDescData
}

var file_proto_p2p_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_p2p_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_proto_p2p_proto_goTypes = []any{
	(HealthStatus)(0),             // 0: octoserve.p2p.HealthStatus
	(ReplicationStrategy)(0),      // 1: octoserve.p2p.ReplicationStrategy
	(*PingRequest)(nil),           // 2: octoserve.p2p.PingRequest
	(*PingResponse)(nil),          // 3: octoserve.p2p.PingResponse
	(*GetBlobRequest)(nil),        // 4: octoserve.p2p.GetBlobRequest
	(*BlobChunk)(nil),             // 5: octoserve.p2p.BlobChunk
	(*PutBlobResponse)(nil),       // 6: octoserve.p2p.PutBlobResponse
	(*HasBlobRequest)(nil),        // 7: octoserve.p2p.HasBlobRequest
	(*HasBlobResponse)(nil),       // 8: octoserve.p2p.HasBlobResponse
	(*GetManifestRequest)(nil),    // 9: octoserve.p2p.GetManifestRequest
	(*GetManifestResponse)(nil),   // 10: octoserve.p2p.GetManifestResponse
	(*PutManifestRequest)(nil),    // 11: octoserve.p2p.PutManifestRequest
	(*PutManifestResponse)(nil),   // 12: octoserve.p2p.PutManifestResponse
	(*HasManifestRequest)(nil),    // 13: octoserve.p2p.HasManifestRequest
	(*HasManifestResponse)(nil),   // 14: octoserve.p2p.HasManifestResponse
	(*GetPeersRequest)(nil),       // 15: octoserve.p2p.GetPeersRequest
	(*GetPeersResponse)(nil),      // 16: octoserve.p2p.GetPeersResponse
	(*AnnounceNodeRequest)(nil),   // 17: octoserve.p2p.AnnounceNodeRequest
	(*AnnounceNodeResponse)(nil),  // 18: octoserve.p2p.AnnounceNodeResponse
	(*ReplicateBlobRequest)(nil),  // 19: octoserve.p2p.ReplicateBlobRequest
	(*ReplicateBlobResponse)(nil), // 20: octoserve.p2p.ReplicateBlobResponse
	(*SyncManifestRequest)(nil),   // 21: octoserve.p2p.SyncManifestRequest
	(*SyncManifestResponse)(nil),  // 22: octoserve.p2p.SyncManifestResponse
	(*PeerInfo)(nil),              // 23: octoserve.p2p.PeerInfo
	(*NodeStatus)(nil),            // 24: octoserve.p2p.NodeStatus
	(*ResourceInfo)(nil),          // 25: octoserve.p2p.ResourceInfo
	nil,                           // 26: octoserve.p2p.PeerInfo.MetadataEntry
	nil,                           // 27: octoserve.p2p.NodeStatus.CapabilitiesEntry
}
var file_proto_p2p_proto_depIdxs = []int32{
	24, // 0: octoserve.p2p.PingResponse.status:type_name -> octoserve.p2p.NodeStatus
	23, // 1: octoserve.p2p.GetPeersResponse.peers:type_name -> octoserve.p2p.PeerInfo
	23, // 2: octoserve.p2p.AnnounceNodeRequest.peer_info:type_name -> octoserve.p2p.PeerInfo
	1,  // 3: octoserve.p2p.ReplicateBlobRequest.strategy:type_name -> octoserve.p2p.ReplicationStrategy
	26, // 4: octoserve.p2p.PeerInfo.metadata:type_name -> octoserve.p2p.PeerInfo.MetadataEntry
	24, // 5: octoserve.p2p.PeerInfo.status:type_name -> octoserve.p2p.NodeStatus
	0,  // 6: octoserve.p2p.NodeStatus.health:type_name -> octoserve.p2p.HealthStatus
	27, // 7: octoserve.p2p.NodeStatus.capabilities:type_name -> octoserve.p2p.NodeStatus.CapabilitiesEntry
	25, // 8: octoserve.p2p.NodeStatus.resources:type_name -> octoserve.p2p.ResourceInfo
	2,  // 9: octoserve.p2p.P2PService.Ping:input_type -> octoserve.p2p.PingRequest
	4,  // 10: octoserve.p2p.P2PService.GetBlob:input_type -> octoserve.p2p.GetBlobRequest
	5,  // 11: octoserve.p2p.P2PService.PutBlob:input_type -> octoserve.p2p.BlobChunk
	7,  // 12: octoserve.p2p.P2PService.HasBlob:input_type -> octoserve.p2p.HasBlobRequest
	9,  // 13: octoserve.p2p.P2PService.GetManifest:input_type -> octoserve.p2p.GetManifestRequest
	11, // 14: octoserve.p2p.P2PService.PutManifest:input_type -> octoserve.p2p.PutManifestRequest
	13, // 15: octoserve.p2p.P2PService.HasManifest:input_type -> octoserve.p2p.HasManifestRequest
	15, // 16: octoserve.p2p.P2PService.GetPeers:input_type -> octoserve.p2p.GetPeersRequest
	17, // 17: octoserve.p2p.P2PService.AnnounceNode:input_type -> octoserve.p2p.AnnounceNodeRequest
	19, // 18: octoserve.p2p.P2PService.ReplicateBlob:input_type -> octoserve.p2p.ReplicateBlobRequest
	21, // 19: octoserve.p2p.P2PService.SyncManifest:input_type -> octoserve.p2p.SyncManifestRequest
	3,  // 20: octoserve.p2p.P2PService.Ping:output_type -> octoserve.p2p.PingResponse
	5,  // 21: octoserve.p2p.P2PService.GetBlob:output_type -> octoserve.p2p.BlobChunk
	6,  // 22: octoserve.p2p.P2PService.PutBlob:output_type -> octoserve.p2p.PutBlobResponse
	8,  // 23: octoserve.p2p.P2PService.HasBlob:output_type -> octoserve.p2p.HasBlobResponse
	10, // 24: octoserve.p2p.P2PService.GetManifest:output_type -> octoserve.p2p.GetManifestResponse
	12, // 25: octoserve.p2p.P2PService.PutManifest:output_type -> octoserve.p2p.PutManifestResponse
	14, // 26: octoserve.p2p.P2PService.HasManifest:output_type -> octoserve.p2p.HasManifestResponse
	16, // 27: octoserve.p2p.P2PService.GetPeers:output_type -> octoserve.p2p.GetPeersResponse
	18, // 28: octoserve.p2p.P2PService.AnnounceNode:output_type -> octoserve.p2p.AnnounceNodeResponse
	20, // 29: octoserve.p2p.P2PService.ReplicateBlob:output_type -> octoserve.p2p.ReplicateBlobResponse
	22, // 30: octoserve.p2p.P2PService.SyncManifest:output_type -> octoserve.p2p.SyncManifestResponse
	20, // [20:31] is the sub-list for method output_type
	9,  // [9:20] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_proto_p2p_proto_init() }
func file_proto_p2p_proto_init() {
	if File_proto_p2p_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_p2p_proto_rawDesc), len(file_proto_p2p_proto_rawDesc)),
			NumEnums:      2,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_p2p_proto_goTypes,
		DependencyIndexes: file_proto_p2p_proto_depIdxs,
		EnumInfos:         file_proto_p2p_proto_enumTypes,
		MessageInfos:      file_proto_p2p_proto_msgTypes,
	}.Build()
	File_proto_p2p_proto = out.File
	file_proto_p2p_proto_goTypes = nil
	file_proto_p2p_proto_depIdxs = nil
}
