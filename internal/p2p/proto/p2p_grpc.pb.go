// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.6
// source: proto/p2p.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	P2PService_Ping_FullMethodName          = "/octoserve.p2p.P2PService/Ping"
	P2PService_GetBlob_FullMethodName       = "/octoserve.p2p.P2PService/GetBlob"
	P2PService_PutBlob_FullMethodName       = "/octoserve.p2p.P2PService/PutBlob"
	P2PService_HasBlob_FullMethodName       = "/octoserve.p2p.P2PService/HasBlob"
	P2PService_GetManifest_FullMethodName   = "/octoserve.p2p.P2PService/GetManifest"
	P2PService_PutManifest_FullMethodName   = "/octoserve.p2p.P2PService/PutManifest"
	P2PService_HasManifest_FullMethodName   = "/octoserve.p2p.P2PService/HasManifest"
	P2PService_GetPeers_FullMethodName      = "/octoserve.p2p.P2PService/GetPeers"
	P2PService_AnnounceNode_FullMethodName  = "/octoserve.p2p.P2PService/AnnounceNode"
	P2PService_ReplicateBlob_FullMethodName = "/octoserve.p2p.P2PService/ReplicateBlob"
	P2PService_SyncManifest_FullMethodName  = "/octoserve.p2p.P2PService/SyncManifest"
)

// P2PServiceClient is the client API for P2PService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// P2PService defines the gRPC service for peer-to-peer communication
type P2PServiceClient interface {
	// Health checking
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// Blob operations
	GetBlob(ctx context.Context, in *GetBlobRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BlobChunk], error)
	PutBlob(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[BlobChunk, PutBlobResponse], error)
	HasBlob(ctx context.Context, in *HasBlobRequest, opts ...grpc.CallOption) (*HasBlobResponse, error)
	// Manifest operations
	GetManifest(ctx context.Context, in *GetManifestRequest, opts ...grpc.CallOption) (*GetManifestResponse, error)
	PutManifest(ctx context.Context, in *PutManifestRequest, opts ...grpc.CallOption) (*PutManifestResponse, error)
	HasManifest(ctx context.Context, in *HasManifestRequest, opts ...grpc.CallOption) (*HasManifestResponse, error)
	// Peer discovery and management
	GetPeers(ctx context.Context, in *GetPeersRequest, opts ...grpc.CallOption) (*GetPeersResponse, error)
	AnnounceNode(ctx context.Context, in *AnnounceNodeRequest, opts ...grpc.CallOption) (*AnnounceNodeResponse, error)
	// Replication operations
	ReplicateBlob(ctx context.Context, in *ReplicateBlobRequest, opts ...grpc.CallOption) (*ReplicateBlobResponse, error)
	SyncManifest(ctx context.Context, in *SyncManifestRequest, opts ...grpc.CallOption) (*SyncManifestResponse, error)
}

type p2PServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewP2PServiceClient(cc grpc.ClientConnInterface) P2PServiceClient {
	return &p2PServiceClient{cc}
}

func (c *p2PServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, P2PService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PServiceClient) GetBlob(ctx context.Context, in *GetBlobRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BlobChunk], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &P2PService_ServiceDesc.Streams[0], P2PService_GetBlob_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[GetBlobRequest, BlobChunk]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type P2PService_GetBlobClient = grpc.ServerStreamingClient[BlobChunk]

func (c *p2PServiceClient) PutBlob(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[BlobChunk, PutBlobResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &P2PService_ServiceDesc.Streams[1], P2PService_PutBlob_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BlobChunk, PutBlobResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type P2PService_PutBlobClient = grpc.ClientStreamingClient[BlobChunk, PutBlobResponse]

func (c *p2PServiceClient) HasBlob(ctx context.Context, in *HasBlobRequest, opts ...grpc.CallOption) (*HasBlobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HasBlobResponse)
	err := c.cc.Invoke(ctx, P2PService_HasBlob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PServiceClient) GetManifest(ctx context.Context, in *GetManifestRequest, opts ...grpc.CallOption) (*GetManifestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetManifestResponse)
	err := c.cc.Invoke(ctx, P2PService_GetManifest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PServiceClient) PutManifest(ctx context.Context, in *PutManifestRequest, opts ...grpc.CallOption) (*PutManifestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutManifestResponse)
	err := c.cc.Invoke(ctx, P2PService_PutManifest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PServiceClient) HasManifest(ctx context.Context, in *HasManifestRequest, opts ...grpc.CallOption) (*HasManifestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HasManifestResponse)
	err := c.cc.Invoke(ctx, P2PService_HasManifest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PServiceClient) GetPeers(ctx context.Context, in *GetPeersRequest, opts ...grpc.CallOption) (*GetPeersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPeersResponse)
	err := c.cc.Invoke(ctx, P2PService_GetPeers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PServiceClient) AnnounceNode(ctx context.Context, in *AnnounceNodeRequest, opts ...grpc.CallOption) (*AnnounceNodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AnnounceNodeResponse)
	err := c.cc.Invoke(ctx, P2PService_AnnounceNode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PServiceClient) ReplicateBlob(ctx context.Context, in *ReplicateBlobRequest, opts ...grpc.CallOption) (*ReplicateBlobResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplicateBlobResponse)
	err := c.cc.Invoke(ctx, P2PService_ReplicateBlob_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *p2PServiceClient) SyncManifest(ctx context.Context, in *SyncManifestRequest, opts ...grpc.CallOption) (*SyncManifestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SyncManifestResponse)
	err := c.cc.Invoke(ctx, P2PService_SyncManifest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// P2PServiceServer is the server API for P2PService service.
// All implementations must embed UnimplementedP2PServiceServer
// for forward compatibility.
//
// P2PService defines the gRPC service for peer-to-peer communication
type P2PServiceServer interface {
	// Health checking
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// Blob operations
	GetBlob(*GetBlobRequest, grpc.ServerStreamingServer[BlobChunk]) error
	PutBlob(grpc.ClientStreamingServer[BlobChunk, PutBlobResponse]) error
	HasBlob(context.Context, *HasBlobRequest) (*HasBlobResponse, error)
	// Manifest operations
	GetManifest(context.Context, *GetManifestRequest) (*GetManifestResponse, error)
	PutManifest(context.Context, *PutManifestRequest) (*PutManifestResponse, error)
	HasManifest(context.Context, *HasManifestRequest) (*HasManifestResponse, error)
	// Peer discovery and management
	GetPeers(context.Context, *GetPeersRequest) (*GetPeersResponse, error)
	AnnounceNode(context.Context, *AnnounceNodeRequest) (*AnnounceNodeResponse, error)
	// Replication operations
	ReplicateBlob(context.Context, *ReplicateBlobRequest) (*ReplicateBlobResponse, error)
	SyncManifest(context.Context, *SyncManifestRequest) (*SyncManifestResponse, error)
	mustEmbedUnimplementedP2PServiceServer()
}

// UnimplementedP2PServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedP2PServiceServer struct{}

func (UnimplementedP2PServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedP2PServiceServer) GetBlob(*GetBlobRequest, grpc.ServerStreamingServer[BlobChunk]) error {
	return status.Errorf(codes.Unimplemented, "method GetBlob not implemented")
}
func (UnimplementedP2PServiceServer) PutBlob(grpc.ClientStreamingServer[BlobChunk, PutBlobResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PutBlob not implemented")
}
func (UnimplementedP2PServiceServer) HasBlob(context.Context, *HasBlobRequest) (*HasBlobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasBlob not implemented")
}
func (UnimplementedP2PServiceServer) GetManifest(context.Context, *GetManifestRequest) (*GetManifestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetManifest not implemented")
}
func (UnimplementedP2PServiceServer) PutManifest(context.Context, *PutManifestRequest) (*PutManifestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutManifest not implemented")
}
func (UnimplementedP2PServiceServer) HasManifest(context.Context, *HasManifestRequest) (*HasManifestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasManifest not implemented")
}
func (UnimplementedP2PServiceServer) GetPeers(context.Context, *GetPeersRequest) (*GetPeersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPeers not implemented")
}
func (UnimplementedP2PServiceServer) AnnounceNode(context.Context, *AnnounceNodeRequest) (*AnnounceNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnnounceNode not implemented")
}
func (UnimplementedP2PServiceServer) ReplicateBlob(context.Context, *ReplicateBlobRequest) (*ReplicateBlobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplicateBlob not implemented")
}
func (UnimplementedP2PServiceServer) SyncManifest(context.Context, *SyncManifestRequest) (*SyncManifestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncManifest not implemented")
}
func (UnimplementedP2PServiceServer) mustEmbedUnimplementedP2PServiceServer() {}
func (UnimplementedP2PServiceServer) testEmbeddedByValue()                    {}

// UnsafeP2PServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to P2PServiceServer will
// result in compilation errors.
type UnsafeP2PServiceServer interface {
	mustEmbedUnimplementedP2PServiceServer()
}

func RegisterP2PServiceServer(s grpc.ServiceRegistrar, srv P2PServiceServer) {
	// If the following call pancis, it indicates UnimplementedP2PServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&P2PService_ServiceDesc, srv)
}

func _P2PService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2PService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PService_GetBlob_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetBlobRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(P2PServiceServer).GetBlob(m, &grpc.GenericServerStream[GetBlobRequest, BlobChunk]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type P2PService_GetBlobServer = grpc.ServerStreamingServer[BlobChunk]

func _P2PService_PutBlob_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(P2PServiceServer).PutBlob(&grpc.GenericServerStream[BlobChunk, PutBlobResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type P2PService_PutBlobServer = grpc.ClientStreamingServer[BlobChunk, PutBlobResponse]

func _P2PService_HasBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasBlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServiceServer).HasBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2PService_HasBlob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServiceServer).HasBlob(ctx, req.(*HasBlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PService_GetManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServiceServer).GetManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2PService_GetManifest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServiceServer).GetManifest(ctx, req.(*GetManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PService_PutManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServiceServer).PutManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2PService_PutManifest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServiceServer).PutManifest(ctx, req.(*PutManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PService_HasManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServiceServer).HasManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2PService_HasManifest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServiceServer).HasManifest(ctx, req.(*HasManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PService_GetPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPeersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServiceServer).GetPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2PService_GetPeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServiceServer).GetPeers(ctx, req.(*GetPeersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PService_AnnounceNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnnounceNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServiceServer).AnnounceNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2PService_AnnounceNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServiceServer).AnnounceNode(ctx, req.(*AnnounceNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PService_ReplicateBlob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplicateBlobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServiceServer).ReplicateBlob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2PService_ReplicateBlob_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServiceServer).ReplicateBlob(ctx, req.(*ReplicateBlobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _P2PService_SyncManifest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncManifestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(P2PServiceServer).SyncManifest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: P2PService_SyncManifest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(P2PServiceServer).SyncManifest(ctx, req.(*SyncManifestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// P2PService_ServiceDesc is the grpc.ServiceDesc for P2PService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var P2PService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "octoserve.p2p.P2PService",
	HandlerType: (*P2PServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _P2PService_Ping_Handler,
		},
		{
			MethodName: "HasBlob",
			Handler:    _P2PService_HasBlob_Handler,
		},
		{
			MethodName: "GetManifest",
			Handler:    _P2PService_GetManifest_Handler,
		},
		{
			MethodName: "PutManifest",
			Handler:    _P2PService_PutManifest_Handler,
		},
		{
			MethodName: "HasManifest",
			Handler:    _P2PService_HasManifest_Handler,
		},
		{
			MethodName: "GetPeers",
			Handler:    _P2PService_GetPeers_Handler,
		},
		{
			MethodName: "AnnounceNode",
			Handler:    _P2PService_AnnounceNode_Handler,
		},
		{
			MethodName: "ReplicateBlob",
			Handler:    _P2PService_ReplicateBlob_Handler,
		},
		{
			MethodName: "SyncManifest",
			Handler:    _P2PService_SyncManifest_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBlob",
			Handler:       _P2PService_GetBlob_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PutBlob",
			Handler:       _P2PService_PutBlob_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/p2p.proto",
}
